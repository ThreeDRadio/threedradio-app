// Mocks generated by Mockito 5.0.3 from annotations
// in player/test/store/shows_epics_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dio/src/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:player/services/wp_schedule_api.dart' as _i3;
import 'package:redux_epics/src/epic_store.dart' as _i5;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDio extends _i1.Fake implements _i2.Dio {}

class _FakeShow extends _i1.Fake implements _i3.Show {}

/// A class which mocks [WpScheduleApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWpScheduleApiService extends _i1.Mock
    implements _i3.WpScheduleApiService {
  MockWpScheduleApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get http =>
      (super.noSuchMethod(Invocation.getter(#http), returnValue: _FakeDio())
          as _i2.Dio);
  @override
  _i4.Future<List<_i3.Schedule>> getSchedules() =>
      (super.noSuchMethod(Invocation.method(#getSchedules, []),
              returnValue: Future.value(<_i3.Schedule>[]))
          as _i4.Future<List<_i3.Schedule>>);
  @override
  _i4.Future<List<_i3.Show>> getShows() => (super.noSuchMethod(
      Invocation.method(#getShows, []),
      returnValue: Future.value(<_i3.Show>[])) as _i4.Future<List<_i3.Show>>);
  @override
  _i4.Future<_i3.Show> getShow(int? id) =>
      (super.noSuchMethod(Invocation.method(#getShow, [id]),
          returnValue: Future.value(_FakeShow())) as _i4.Future<_i3.Show>);
}

/// A class which mocks [EpicStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockEpicStore<State> extends _i1.Mock implements _i5.EpicStore<State> {
  MockEpicStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  State get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: null)
          as State);
  @override
  _i4.Stream<State> get onChange =>
      (super.noSuchMethod(Invocation.getter(#onChange),
          returnValue: Stream<State>.empty()) as _i4.Stream<State>);
}
